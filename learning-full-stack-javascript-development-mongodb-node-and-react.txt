https://stackoverflow.com/questions/24387451/how-can-i-kill-whatever-process-is-using-port-8080-so-that-i-can-vagrant-up

!https://www.pluralsight.com/guides/load-a-json-file-with-es6-modules-implementation
https://github.com/webpack-contrib/json-loader
https://www.delftstack.com/howto/react/react-import-json-file/
*https://aglowiditsolutions.com/blog/react-webpack/


https://jscomplete.com/learn/1rd-reactful
https://github.com/jscomplete/learn-fullstack-javascript

/*
npm run dev
npm start
*/


npm init

// generates package.json

npm install express

npm i mongodb

npm i react react-dom

npm i - D webpack webpack-cli

???
npm i babel-loader @babel/core @babel/node @babel/preset-env @babel/preset-react

npm i -D nodemon

npm i -D eslint babel-eslint eslint-plugin-react eslint-plugin-react-hooks



---

mkdir src
mkdir public
mkdir api

touch src/index.js
touch public/index.html
touch api/index.js

Add this change inside package.json:

"scripts": {
  "start": "nodemon --exec babel-node server.js --ignore public/",
  "dev": "webpack -wd"
},


Add a new file webpack.config.js:

const path = require('path');

module.exports = {
  entry: './src/index.js',
  output: {
    path: path.resolve('public'),
    filename: 'bundle.js'
  },
  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader'
        }
      }
    ]
  }
};

Add a new file babel.config.js:

module.exports = {
  presets: ['@babel/react', '@babel/env'],
  plugins: ['@babel/plugin-proposal-class-properties']
};

Add a new file .eslintrc.js:

module.exports = {
  parser: 'babel-eslint',
  env: {
    browser: true,
    commonjs: true,
    es6: true,
    node: true,
    jest: true
  },
  extends: ['eslint:recommended', 'plugin:react/recommended'],
  parserOptions: {
    ecmaFeatures: {
      jsx: true
    },
    sourceType: 'module'
  },
  plugins: ['react'],
  rules: {
    indent: ['error', 2, { SwitchCase: 1 }],
    'linebreak-style': ['error', 'unix'],
    quotes: ['error', 'single'],
    semi: ['error', 'always'],
    'no-console': [
      'warn',
      { allow: ['clear', 'info', 'error', 'dir', 'trace'] }
    ]
  }
};



---

Node as a Web Server

./node_modules/.bin/babel-node server.js

vi ~/.bash_profile

Add the relative path:
export PATH=$PATH:./node_modules/.bin

babel-node server.js

config.js
---

const env = process.env;

// console.log('config');

export default {
  port: env.PORT || 8080
};

server.js
---

import config from './config';
// import './config';

console.log(config);

Run the server:
babel-node server.js

Result should be:
{ port: 8080 }

// babel-node server.js | less

--- The HTTP/HTTPS modules

server.js
---

mport http from 'http';

const server = http.createServer();

server.listen(8080);

server.on('request', (req, res) => {
  res.write('Hello HTTP!\n');
  setTimeout(() => {
    res.write('I can stream!\n');
    res.end();
  }, 3000);
});

Run in terminal:
babel-node server.js

Run in second terminal:
curl http://localhost:8080/
Hello HTTP!
I can stream!


---

// babel-node server.js

npm start


https://ejs.co/
https://koajs.com/
https://hapi.dev/
https://sailsjs.com/
https://github.com/pugjs/pug
https://handlebarsjs.com/



---

To generate the bundle inside the public/bundle.js file (webpack should do the job), use:

npm run dev

npm start

Open http://localhost:8080/ to test.



--- Working with Data

We need a way for webpack to understand JSON data:
npm i -S json-loader

add to webpack.config.js (didn't work):

{
  test: /\.json$/,
  exclude: /node_modules/,
  use: {
    loader: 'json-loader'
  }
}


Sass
https://sass-lang.com/

npm i -S node-sass-middleware

Install axios:

npm i -S axios



--- Rendering on the Server

ReactDOMServer package
